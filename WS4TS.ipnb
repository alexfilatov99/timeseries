{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from fbprophet import Prophet\n",
    "import logging\n",
    "from flask import Flask, request, abort\n",
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "инициализация логгирования\n",
    "'''\n",
    "root = logging.getLogger()\n",
    "root.setLevel(logging.DEBUG)\n",
    "handler = logging.StreamHandler(sys.stdout)\n",
    "handler.setLevel(logging.DEBUG)\n",
    "formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n",
    "handler.setFormatter(formatter)\n",
    "root.addHandler(handler)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#\n",
    "def fb_predict(data, n_period, freq):\n",
    "'''\n",
    "функция получает на вход временной ряд и возвращает верхнюю границу предсказанного ряда на заданное количество периодов вперед в формате json\n",
    "\n",
    "----------\n",
    "Параметры:\n",
    "data - временной ряд в виде матрицы со столбцами 'ds' и 'y', где\n",
    "       ds - времнные индексы в текстовом формате\n",
    "       у - значения\n",
    "n_period - кол-во периодов предсказания, целое число\n",
    "freq - размерность периодов: 'D', 'W', 'Q', 'Y'\n",
    "\n",
    "'''\n",
    "    try:\n",
    "        print('freq=', freq)\n",
    "        print('n_period=', n_period)\n",
    "        logging.info('1.Читаю данные')\n",
    "        data = pd.read_json(data)\n",
    "        data['ds'] = pd.to_datetime(data['ds'], yearfirst=True)\n",
    "        new_index = pd.date_range(data['ds'].min(), data['ds'].max(), freq=freq)\n",
    "        #print(data)\n",
    "        #print(new_index)\n",
    "        data = data.sort_index()\n",
    "        #print(data)\n",
    "        logging.info('2.Данные прочитаны. Инициализация модели')\n",
    "        model = Prophet(yearly_seasonality=True, daily_seasonality=True)\n",
    "        logging.info('3.Модель инициализирована. Начинаю обучение модели')\n",
    "        model.fit(data)\n",
    "        logging.info('4.Обучение модели закончено')\n",
    "        future = model.make_future_dataframe(periods=n_period, freq=freq)\n",
    "        logging.info('5.Делаю предсказания')\n",
    "        preds = model.predict(future)[-n_period:]\n",
    "        logging.info('6.Предсказания сделаны. Формирую результат')\n",
    "        preds['yhat_upper'] = round(preds['yhat_upper'])\n",
    "        logging.info('7.Результат сформирован.')\n",
    "        return preds[['ds', 'yhat_upper']].astype('str').to_json()\n",
    "    except ValueError: \n",
    "        logging.info(\"Не удалось прочитать данные\")\n",
    "        return 'Ошибка чтения данных'\n",
    "    except AttributeError:\n",
    "        logging.info(\"Не удалось обработать ряд и сделать предсказание\")\n",
    "        return 'Ошибка обработки данных'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "application = Flask(__name__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "@application.route('/TS/', methods=['POST'])\n",
    "\n",
    "def get_data():\n",
    "'''\n",
    "Метод сервиса, получает тело запроса и возвращает прогноз верхней границы временного ряда.\n",
    "'''\n",
    "    \n",
    "    if not request.json:\n",
    "        logging.info('Запрос не содержит данных')\n",
    "        abort(400)\n",
    "    data = request.json\n",
    "    \n",
    "    #print(data)\n",
    "    try:\n",
    "        return fb_predict(data, int(request.headers['n_period']), request.headers['freq'])\n",
    "    except:\n",
    "        abort(400)\n",
    "        return 'error'\n",
    "\n",
    "@application.route('/test/', methods=['GET'])\n",
    "'''\n",
    "Метод для тестирования отклика сервиса. Возвращает строку 'Hello' в случае доступности сервиса\n",
    "'''\n",
    "def test_answer():    \n",
    "    return 'Hello'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug: * Running on http://localhost:8081/ (Press CTRL+C to quit)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:31:48,137 - INFO -  * Running on http://localhost:8081/ (Press CTRL+C to quit)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [14/Aug/2019 15:31:51] \"\u001b[32mPOST /TS HTTP/1.1\u001b[0m\" 308 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:31:51,834 - INFO - 127.0.0.1 - - [14/Aug/2019 15:31:51] \"\u001b[32mPOST /TS HTTP/1.1\u001b[0m\" 308 -\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:1.Читаю данные\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "freq= M\n",
      "n_period= 20\n",
      "2019-08-14 15:31:51,840 - INFO - 1.Читаю данные\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:2.Данные прочитаны. Инициализация модели\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:31:51,857 - INFO - 2.Данные прочитаны. Инициализация модели\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:3.Модель инициализирована. Начинаю обучение модели\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:31:51,859 - INFO - 3.Модель инициализирована. Начинаю обучение модели\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/bin/anaconda3/lib/python3.6/site-packages/fbprophet/forecaster.py:880: FutureWarning: Series.nonzero() is deprecated and will be removed in a future version.Use Series.to_numpy().nonzero() instead\n",
      "  min_dt = dt.iloc[dt.nonzero()[0]].min()\n",
      "INFO:fbprophet:Disabling weekly seasonality. Run prophet with weekly_seasonality=True to override this.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:31:51,873 - INFO - Disabling weekly seasonality. Run prophet with weekly_seasonality=True to override this.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:4.Обучение модели закончено\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inner_freq= month\n",
      "2019-08-14 15:31:51,913 - INFO - 4.Обучение модели закончено\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:5.Делаю предсказания\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:31:51,918 - INFO - 5.Делаю предсказания\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:6.Предсказания сделаны. Формирую результат\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:31:53,582 - INFO - 6.Предсказания сделаны. Формирую результат\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:7.Результат сформирован.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:31:53,641 - INFO - 7.Результат сформирован.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [14/Aug/2019 15:31:53] \"\u001b[37mPOST /TS/ HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:31:53,645 - INFO - 127.0.0.1 - - [14/Aug/2019 15:31:53] \"\u001b[37mPOST /TS/ HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [14/Aug/2019 15:32:31] \"\u001b[32mPOST /TS HTTP/1.1\u001b[0m\" 308 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:32:31,735 - INFO - 127.0.0.1 - - [14/Aug/2019 15:32:31] \"\u001b[32mPOST /TS HTTP/1.1\u001b[0m\" 308 -\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:1.Читаю данные\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "freq= Y\n",
      "n_period= 2\n",
      "2019-08-14 15:32:31,740 - INFO - 1.Читаю данные\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:2.Данные прочитаны. Инициализация модели\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:32:31,751 - INFO - 2.Данные прочитаны. Инициализация модели\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:3.Модель инициализирована. Начинаю обучение модели\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:32:31,753 - INFO - 3.Модель инициализирована. Начинаю обучение модели\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/bin/anaconda3/lib/python3.6/site-packages/fbprophet/forecaster.py:880: FutureWarning: Series.nonzero() is deprecated and will be removed in a future version.Use Series.to_numpy().nonzero() instead\n",
      "  min_dt = dt.iloc[dt.nonzero()[0]].min()\n",
      "INFO:fbprophet:Disabling weekly seasonality. Run prophet with weekly_seasonality=True to override this.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:32:31,766 - INFO - Disabling weekly seasonality. Run prophet with weekly_seasonality=True to override this.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:4.Обучение модели закончено\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inner_freq= year\n",
      "2019-08-14 15:32:31,817 - INFO - 4.Обучение модели закончено\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:5.Делаю предсказания\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:32:31,825 - INFO - 5.Делаю предсказания\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:6.Предсказания сделаны. Формирую результат\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:32:33,411 - INFO - 6.Предсказания сделаны. Формирую результат\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:root:7.Результат сформирован.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:32:33,478 - INFO - 7.Результат сформирован.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [14/Aug/2019 15:32:33] \"\u001b[37mPOST /TS/ HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-14 15:32:33,484 - INFO - 127.0.0.1 - - [14/Aug/2019 15:32:33] \"\u001b[37mPOST /TS/ HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    # Setting debug to True enables debug output. This line should be\n",
    "    # removed before deploying a production app.\n",
    "    #application.debug = True\n",
    "    application.run(host='localhost', port='8081')       \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug: * Running on http://localhost:8081/ (Press CTRL+C to quit)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-07 18:18:44,896 - INFO -  * Running on http://localhost:8081/ (Press CTRL+C to quit)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [07/Aug/2019 18:18:52] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-07 18:18:52,427 - INFO - 127.0.0.1 - - [07/Aug/2019 18:18:52] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [07/Aug/2019 18:19:11] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-07 18:19:11,938 - INFO - 127.0.0.1 - - [07/Aug/2019 18:19:11] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [07/Aug/2019 18:19:47] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-07 18:19:47,086 - INFO - 127.0.0.1 - - [07/Aug/2019 18:19:47] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [07/Aug/2019 18:20:34] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-07 18:20:34,865 - INFO - 127.0.0.1 - - [07/Aug/2019 18:20:34] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [07/Aug/2019 18:20:42] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-07 18:20:42,683 - INFO - 127.0.0.1 - - [07/Aug/2019 18:20:42] \"\u001b[33mPOST /TS HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:werkzeug:127.0.0.1 - - [07/Aug/2019 18:21:00] \"\u001b[33mGET /test HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-08-07 18:21:00,188 - INFO - 127.0.0.1 - - [07/Aug/2019 18:21:00] \"\u001b[33mGET /test HTTP/1.1\u001b[0m\" 404 -\n"
     ]
    }
   ],
   "source": [
    "#application.debug = True\n",
    "application.run(host='localhost', port='8081')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
